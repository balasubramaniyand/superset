import logging
import os
from flask_caching import Cache
from celery.schedules import crontab

logger = logging.getLogger()

# Database configurations
DATABASE_DIALECT = os.getenv("DATABASE_DIALECT")
DATABASE_USER = os.getenv("DATABASE_USER")
DATABASE_PASSWORD = os.getenv("DATABASE_PASSWORD")
DATABASE_HOST = os.getenv("DATABASE_HOST")
DATABASE_PORT = os.getenv("DATABASE_PORT")
DATABASE_DB = os.getenv("DATABASE_DB")

EXAMPLES_USER = os.getenv("EXAMPLES_USER")
EXAMPLES_PASSWORD = os.getenv("EXAMPLES_PASSWORD")
EXAMPLES_HOST = os.getenv("EXAMPLES_HOST")
EXAMPLES_PORT = os.getenv("EXAMPLES_PORT")
EXAMPLES_DB = os.getenv("EXAMPLES_DB")

# SQLAlchemy connection strings
SQLALCHEMY_DATABASE_URI = f"{DATABASE_DIALECT}://{DATABASE_USER}:{DATABASE_PASSWORD}@{DATABASE_HOST}:{DATABASE_PORT}/{DATABASE_DB}"
SQLALCHEMY_EXAMPLES_URI = f"{DATABASE_DIALECT}://{EXAMPLES_USER}:{EXAMPLES_PASSWORD}@{EXAMPLES_HOST}:{EXAMPLES_PORT}/{EXAMPLES_DB}"

# Redis configurations
REDIS_HOST = os.getenv("REDIS_HOST", "redis")
REDIS_PORT = os.getenv("REDIS_PORT", "6379")
REDIS_CELERY_DB = os.getenv("REDIS_CELERY_DB", "0")
REDIS_RESULTS_DB = os.getenv("REDIS_RESULTS_DB", "1")

# Cache configurations
RESULTS_BACKEND = "/app/superset_home/sqllab"

CACHE_CONFIG = {
    "CACHE_TYPE": "RedisCache",
    "CACHE_DEFAULT_TIMEOUT": 300,
    "CACHE_KEY_PREFIX": "superset_",
    "CACHE_REDIS_HOST": REDIS_HOST,
    "CACHE_REDIS_PORT": REDIS_PORT,
    "CACHE_REDIS_DB": REDIS_RESULTS_DB,
}
DATA_CACHE_CONFIG = CACHE_CONFIG

# Celery configurations
class CeleryConfig:
    broker_url = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_CELERY_DB}"
    imports = ("superset.sql_lab",)
    result_backend = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_RESULTS_DB}"
    worker_prefetch_multiplier = 1
    task_acks_late = False
    beat_schedule = {
        "reports.scheduler": {
            "task": "reports.scheduler",
            "schedule": crontab(minute="*", hour="*"),
        },
        "reports.prune_log": {
            "task": "reports.prune_log",
            "schedule": crontab(minute=10, hour=0),
        },
    }

CELERY_CONFIG = CeleryConfig
ALERT_REPORTS_NOTIFICATION_DRY_RUN = True
EMAIL_NOTIFICATIONS = True

# SMTP configurations
SMTP_HOST = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_STARTTLS = True
SMTP_SSL_SERVER_AUTH = True
SMTP_SSL = False
SMTP_USER = "supporfirst_dev@iopex.com"
SMTP_PASSWORD = "twrlwoapmikkddpp"
SMTP_MAIL_FROM = "supporfirst_dev@iopex.com"
EMAIL_REPORTS_SUBJECT_PREFIX = "[Superset] "

# WebDriver configurations
WEBDRIVER_TYPE = "chrome"
WEBDRIVER_TYPE_PATH = "/usr/local/bin/geckodriver"

WEBDRIVER_TYPE = "chrome"
WEBDRIVER_OPTION_ARGS = [
"--force-device-scale-factor=2.0",
"--high-dpi-support=2.0",
"--headless",
"--disable-gpu",
"--disable-dev-shm-usage",
"--no-sandbox",
"--disable-setuid-sandbox",
"--disable-extensions",
]```

FEATURE_FLAGS = {"ALERT_REPORTS": True}
WEBDRIVER_BASEURL = "http://superset:8088/"
WEBDRIVER_BASEURL_USER_FRIENDLY = WEBDRIVER_BASEURL

SQLLAB_CTAS_NO_LIMIT = True

# Docker-specific configuration
try:
    import superset_config_docker
    from superset_config_docker import *  # noqa

    logger.info(f"Loaded your Docker configuration at [{superset_config_docker.__file__}]")
except ImportError:
    logger.info("Using default Docker config...")
balasubramaniyand@CHNIOPEXL5097:~/gmail/superset/docker/pythonpath_dev$ import logging
import os
from flask_caching import Cache
from celery.schedules import crontab

logger = logging.getLogger()

# Database configurations
DATABASE_DIALECT = os.getenv("DATABASE_DIALECT")
DATABASE_USER = os.getenv("DATABASE_USER")
DATABASE_PASSWORD = os.getenv("DATABASE_PASSWORD")
DATABASE_HOST = os.getenv("DATABASE_HOST")
DATABASE_PORT = os.getenv("DATABASE_PORT")
DATABASE_DB = os.getenv("DATABASE_DB")

EXAMPLES_USER = os.getenv("EXAMPLES_USER")
EXAMPLES_PASSWORD = os.getenv("EXAMPLES_PASSWORD")
EXAMPLES_HOST = os.getenv("EXAMPLES_HOST")
EXAMPLES_PORT = os.getenv("EXAMPLES_PORT")
EXAMPLES_DB = os.getenv("EXAMPLES_DB")

# SQLAlchemy connection strings
SQLALCHEMY_DATABASE_URI = f"{DATABASE_DIALECT}://{DATABASE_USER}:{DATABASE_PASSWORD}@{DATABASE_HOST}:{DATABASE_PORT}/{DATABASE_DB}" 
SQLALCHEMY_EXAMPLES_URI = f"{DATABASE_DIALECT}://{EXAMPLES_USER}:{EXAMPLES_PASSWORD}@{EXAMPLES_HOST}:{EXAMPLES_PORT}/{EXAMPLES_DB}" 

# Redis configurations
REDIS_HOST = os.getenv("REDIS_HOST", "redis")
REDIS_PORT = os.getenv("REDIS_PORT", "6379")
REDIS_CELERY_DB = os.getenv("REDIS_CELERY_DB", "0")
REDIS_RESULTS_DB = os.getenv("REDIS_RESULTS_DB", "1")

# Cache configurations
^C  logger.info("Using default Docker config...")n at [{superset_config_docker.__file__}]")
balasubramaniyand@CHNIOPEXL5097:~/gmail/superset/docker/pythonpath_dev$ cat superset_config.py
import logging
import os
from flask_caching import Cache
from celery.schedules import crontab

logger = logging.getLogger()

# Database configurations
DATABASE_DIALECT = os.getenv("DATABASE_DIALECT")
DATABASE_USER = os.getenv("DATABASE_USER")
DATABASE_PASSWORD = os.getenv("DATABASE_PASSWORD")
DATABASE_HOST = os.getenv("DATABASE_HOST")
DATABASE_PORT = os.getenv("DATABASE_PORT")
DATABASE_DB = os.getenv("DATABASE_DB")

EXAMPLES_USER = os.getenv("EXAMPLES_USER")
EXAMPLES_PASSWORD = os.getenv("EXAMPLES_PASSWORD")
EXAMPLES_HOST = os.getenv("EXAMPLES_HOST")
EXAMPLES_PORT = os.getenv("EXAMPLES_PORT")
EXAMPLES_DB = os.getenv("EXAMPLES_DB")

# SQLAlchemy connection strings
SQLALCHEMY_DATABASE_URI = f"{DATABASE_DIALECT}://{DATABASE_USER}:{DATABASE_PASSWORD}@{DATABASE_HOST}:{DATABASE_PORT}/{DATABASE_DB}"
SQLALCHEMY_EXAMPLES_URI = f"{DATABASE_DIALECT}://{EXAMPLES_USER}:{EXAMPLES_PASSWORD}@{EXAMPLES_HOST}:{EXAMPLES_PORT}/{EXAMPLES_DB}"

# Redis configurations
REDIS_HOST = os.getenv("REDIS_HOST", "redis")
REDIS_PORT = os.getenv("REDIS_PORT", "6379")
REDIS_CELERY_DB = os.getenv("REDIS_CELERY_DB", "0")
REDIS_RESULTS_DB = os.getenv("REDIS_RESULTS_DB", "1")

# Cache configurations
RESULTS_BACKEND = "/app/superset_home/sqllab"

CACHE_CONFIG = {
    "CACHE_TYPE": "RedisCache",
    "CACHE_DEFAULT_TIMEOUT": 300,
    "CACHE_KEY_PREFIX": "superset_",
    "CACHE_REDIS_HOST": REDIS_HOST,
    "CACHE_REDIS_PORT": REDIS_PORT,
    "CACHE_REDIS_DB": REDIS_RESULTS_DB,
}
DATA_CACHE_CONFIG = CACHE_CONFIG

# Celery configurations
class CeleryConfig:
    broker_url = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_CELERY_DB}"
    imports = ("superset.sql_lab",)
    result_backend = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_RESULTS_DB}"
    worker_prefetch_multiplier = 1
    task_acks_late = False
    beat_schedule = {
        "reports.scheduler": {
            "task": "reports.scheduler",
            "schedule": crontab(minute="*", hour="*"),
        },
        "reports.prune_log": {
            "task": "reports.prune_log",
            "schedule": crontab(minute=10, hour=0),
        },
    }

CELERY_CONFIG = CeleryConfig
ALERT_REPORTS_NOTIFICATION_DRY_RUN = True
EMAIL_NOTIFICATIONS = True

# SMTP configurations
SMTP_HOST = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_STARTTLS = True
SMTP_SSL_SERVER_AUTH = True
SMTP_SSL = False
SMTP_USER = "supporfirst_dev@iopex.com"
SMTP_PASSWORD = "twrlwoapmikkddpp"
SMTP_MAIL_FROM = "supporfirst_dev@iopex.com"
EMAIL_REPORTS_SUBJECT_PREFIX = "[Superset] "

# WebDriver configurations
WEBDRIVER_TYPE = "chrome"
WEBDRIVER_TYPE_PATH = "/usr/local/bin/geckodriver"

WEBDRIVER_TYPE = "chrome"
WEBDRIVER_OPTION_ARGS = [
"--force-device-scale-factor=2.0",
"--high-dpi-support=2.0",
"--headless",
"--disable-gpu",
"--disable-dev-shm-usage",
"--no-sandbox",
"--disable-setuid-sandbox",
"--disable-extensions",
]```

FEATURE_FLAGS = {"ALERT_REPORTS": True}
WEBDRIVER_BASEURL = "http://superset:8088/"
WEBDRIVER_BASEURL_USER_FRIENDLY = WEBDRIVER_BASEURL

SQLLAB_CTAS_NO_LIMIT = True

# Docker-specific configuration
try:
    import superset_config_docker
    from superset_config_docker import *  # noqa

    logger.info(f"Loaded your Docker configuration at [{superset_config_docker.__file__}]")
except ImportError:
    logger.info("Using default Docker config...")
