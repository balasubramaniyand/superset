#from keycloack_securtiy_manager  import  OIDCSecurityManager
from flask_appbuilder.security.manager import AUTH_OID, AUTH_REMOTE_USER, AUTH_DB, AUTH_LDAP, AUTH_OAUTH
import logging
import os
from datetime import timedelta
from cachelib.file import FileSystemCache
from celery.schedules import crontab
from typing import Optional
'''
---------------------------KEYCLOACK ----------------------------
'''
#curr  =  os.path.abspath(os.getcwd())
#AUTH_TYPE = AUTH_OID
#SECRET_KEY: 'opexwisesupersetintegration'
#OIDC_CLIENT_SECRETS =  curr + '/pythonpath/client_secret.json'
#OIDC_ID_TOKEN_COOKIE_SECURE = False
#OIDC_REQUIRE_VERIFIED_EMAIL = False
#OIDC_OPENID_REALM: 'opexwise'
#OIDC_INTROSPECTION_AUTH_METHOD: 'client_secret_post'
#CUSTOM_SECURITY_MANAGER = OIDCSecurityManager
#AUTH_USER_REGISTRATION = False
#AUTH_USER_REGISTRATION_ROLE = 'Alpha'
'''
--------------------------------------------------------------
'''
# Set the authentication type to OAuth
AUTH_TYPE = AUTH_OAUTH

OAUTH_PROVIDERS = [
    {   'name':'google',
        'token_key':'access_token',
        'icon':'fa-google',
        'remote_app': {
           
            '
            'client_kwargs':{
                'scope': 'email profile'
            },
            'access_token_params':{
                
            },
                'access_token_headers':{    # Additional headers for calls to access_token_url
                'Authorization': 'Basic ODQ4MjkyMDY0NTgxLWMycnUybzZmMmpvNmEzbXIzcGloZmk5NjBsNDlmMjd1LmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tOkdPQ1NQWC1SbTc5Z2c5OVlDMkFJbHBwUjNSYTh1NDhxelVR'
                },
                'api_base_url':'https://www.googleapis.com/oauth2/v2/',
                'access_token_url':'https://accounts.google.com/o/oauth2/token',
                'authorize_url':'https://accounts.google.com/o/oauth2/auth',

        }
    }
]
# redirect_url = 

AUTH_ROLES_MAPPING = {
"superset_users": ["Gamma","Alpha"],
"superset_admins": ["Admin"],
}

# Will allow user self registration, allowing to create Flask users from Authorized User
AUTH_USER_REGISTRATION = True

# The default user self registration role
AUTH_USER_REGISTRATION_ROLE = "Public"

# from custom_sso_security_manager import CustomSsoSecurityManager
# CUSTOM_SECURITY_MANAGER = CustomSsoSecurityManager

ENABLE_CORS = True

#ENABLE_PROXY_FIX = True
#PROXY_FIX_CONFIG = {"x_for": 1, "x_proto": 1, "x_host": 1, "x_port": 0, "x_prefix": 1}

PREFERRED_URL_SCHEME = 'https'
SUPERSET_WEBSERVER_PROTOCOL = "https"

HTTP_HEADERS={}

PUBLIC_ROLE_LIKE = "Gamma"

SESSION_COOKIE_SAMESITE = "Lax"
SESSION_COOKIE_SECURE = False
SESSION_COOKIE_HTTPONLY = False

WTF_CSRF_ENABLED = False

#Alert 
ALERT_REPORTS_NOTIFICATION_DRY_RUN = False


#migration to postgres
SQLALCHEMY_DATABASE_URI = "postgresql://superset:superset@10.10.50.23:8005/superset"

FEATURE_FLAGS = {
    "DASHBOARD_NATIVE_FILTERS": True,
    "DASHBOARD_CROSS_FILTERS": True,
    "DASHBOARD_NATIVE_FILTERS_SET": True,
    "ALERT_REPORTS": True,
    "DASHBOARD_RBAC": True,
    "ENABLE_TEMPLATE_PROCESSING": True
}
TEMPLATES_EXTENSIONS= ['superset_jinja2_ext']
LOGIN_REDIRECT_URL = '/login'
DISABLED_TOP_LEVEL_NAV_ITEMS=['Dashboards','Charts','Data','Settings','Datasets']
#STATIC_FILES_EXCLUDE_LIST = ['static/assets/package.json']

def get_env_variable(var_name: str, default: Optional[str] = None) -> str:
    """Get the environment variable or raise exception."""
    try:
        return os.environ[var_name]
    except KeyError:
        if default is not None:
            return default
        else:
            error_msg = "The environment variable {} was missing, abort...".format(
                var_name
            )
            raise EnvironmentError(error_msg)



REDIS_HOST = get_env_variable("REDIS_HOST")
REDIS_PORT = get_env_variable("REDIS_PORT")
REDIS_CELERY_DB = get_env_variable("REDIS_CELERY_DB", "0")
REDIS_RESULTS_DB = get_env_variable("REDIS_RESULTS_DB", "1")

RESULTS_BACKEND = FileSystemCache("/app/superset_home/sqllab")


class CeleryConfig(object):
    BROKER_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_CELERY_DB}"
    CELERY_IMPORTS = ("superset.sql_lab", "superset.tasks")
    CELERY_RESULT_BACKEND = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_RESULTS_DB}"
    CELERYD_LOG_LEVEL = "DEBUG"
    CELERYD_PREFETCH_MULTIPLIER = 1
    CELERY_ACKS_LATE = False
    CELERYBEAT_SCHEDULE = {
        "reports.scheduler": {
            "task": "reports.scheduler",
            "schedule": crontab(minute="*", hour="*"),
        },
        "reports.prune_log": {
            "task": "reports.prune_log",
            "schedule": crontab(minute=10, hour=0),
        },
    }


CELERY_CONFIG = CeleryConfig


# Email configuration
#SMTP_HOST = "smtp.iopex.com" # change to your host
#SMTP_PORT = 587 # your port, e.g. 587
#SMTP_STARTTLS = True
#SMTP_SSL_SERVER_AUTH = True # If your using an SMTP server with a valid certificate
#SMTP_SSL = False
#SMTP_USER = "opexwise-jenkins" # use the empty string "" if using an unauthenticated SMTP server
#SMTP_PASSWORD = "qoejkvssxfitvszx" # use the empty string "" if using an unauthenticated SMTP server
#SMTP_MAIL_FROM = "opexwise-jenkins@iopex.com"
#EMAIL_REPORTS_SUBJECT_PREFIX = "[Superset] " # optional - overwrites default value in config.py of "[Report] "
#SQLLAB_CTAS_NO_LIMIT = True
SMTP_HOST = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_STARTTLS = True
SMTP_SSL_SERVER_AUTH = True
SMTP_SSL = False
SMTP_USER = "supporfirst_dev@iopex.com "
SMTP_PASSWORD = "twrlwoapmikkddpp"
SMTP_MAIL_FROM = "supporfirst_dev@iopex.com"
EMAIL_REPORTS_SUBJECT_PREFIX = "[Superset] "
SQLLAB_CTAS_NO_LIMIT = True


#SCREENSHOT_LOCATE_WAIT = 1000
#SCREENSHOT_LOAD_WAIT = 6000
# WebDriver configuration
# If you use Firefox, you can stick with default values
# If you use Chrome, then add the following WEBDRIVER_TYPE and WEBDRIVER_OPTION_ARGS
WEBDRIVER_TYPE = "chrome"
WEBDRIVER_OPTION_ARGS = [
    "--force-device-scale-factor=2.0",
    "--high-dpi-support=2.0",
    "--headless",
    "--disable-gpu",
    "--disable-dev-shm-usage",
    "--no-sandbox",
    "--disable-setuid-sandbox",
    "--disable-extensions",
]
# This is for internal use, you can keep http

WEBDRIVER_BASEURL = "http://10.10.50.23:8088"
#WEBDRIVER_BASEURL = "http://dev.opexwise.ai:8088"
# This is the link sent to the recipient. Change to your domain, e.g. https://superset.mydomain.com
WEBDRIVER_BASEURL_USER_FRIENDLY = "https://dev.opexwise.ai:8088"

ENABLE_PROXY_FIX = True
PROXY_FIX_CONFIG = {"x_for": 1, "x_proto": 1, "x_host": 1, "x_port": 0, "x_prefix": 1}
